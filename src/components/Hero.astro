---
---

<section class="hero">
  <div class="hero-background">
    <div class="cyber-grid"></div>
  </div>
  
  <div class="container">
    <div class="hero-content">
      <h1 class="hero-title">
        Defending the <span class="highlight">Digital Frontier</span>
      </h1>
      <p class="hero-description">
        Stay ahead of cyber threats with expert insights, latest security trends, 
        and professional defense strategies from industry leaders.
      </p>
      <div class="hero-actions">
        <a href="#latest-posts" class="btn latest-btn">Latest Articles</a>
        <a href="/about" class="btn btn-secondary about-btn">About Us</a>
      </div>
      <div class="hero-stats">
        <div class="stat">
          <div class="stat-number">500+</div>
          <div class="stat-label">Security Articles</div>
        </div>
        <div class="stat">
          <div class="stat-number">50K+</div>
          <div class="stat-label">Monthly Readers</div>
        </div>
        <div class="stat">
          <div class="stat-number">24/7</div>
          <div class="stat-label">Threat Monitoring</div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Smooth scroll for latest articles button
    const latestBtn = document.querySelector('.latest-btn');
    if (latestBtn) {
      latestBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector('#latest-posts');
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    }
    
    // Add click animation to buttons
    const heroButtons = document.querySelectorAll('.hero-actions .btn');
    heroButtons.forEach(button => {
      button.addEventListener('click', function() {
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
          this.style.transform = '';
        }, 150);
      });
    });
    
    // Animate stats on scroll
    const stats = document.querySelectorAll('.stat-number');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const target = entry.target;
          const finalValue = target.textContent;
          animateNumber(target, finalValue);
          observer.unobserve(target);
        }
      });
    });
    
    stats.forEach(stat => observer.observe(stat));
    
    function animateNumber(element, finalValue) {
      const isNumber = /^\d+$/.test(finalValue);
      if (!isNumber) return;
      
      const duration = 2000;
      const start = 0;
      const end = parseInt(finalValue);
      const startTime = performance.now();
      
      function updateNumber(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const current = Math.floor(start + (end - start) * progress);
        
        element.textContent = current + (finalValue.includes('K') ? 'K+' : finalValue.includes('h') ? 'h' : '+');
        
        if (progress < 1) {
          requestAnimationFrame(updateNumber);
        } else {
          element.textContent = finalValue;
        }
      }
      
      requestAnimationFrame(updateNumber);
    }
  });
</script>

<style>
  .hero {
    position: relative;
    min-height: 80vh;
    display: flex;
    align-items: center;
    overflow: hidden;
  }

  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
  }

  .cyber-grid {
    background-image: 
      linear-gradient(rgba(16, 185, 129, 0.1) 1px, transparent 1px),
      linear-gradient(90deg, rgba(16, 185, 129, 0.1) 1px, transparent 1px);
    background-size: 50px 50px;
    width: 100%;
    height: 100%;
    animation: grid-move 20s linear infinite;
  }

  @keyframes grid-move {
    0% { transform: translate(0, 0); }
    100% { transform: translate(50px, 50px); }
  }

  .hero-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    line-height: 1.1;
    animation: fadeInUp 1s ease-out;
  }

  .highlight {
    background: linear-gradient(135deg, #10B981 0%, #3B82F6 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    position: relative;
  }

  .hero-description {
    font-size: 1.25rem;
    color: #94A3B8;
    margin-bottom: 2.5rem;
    line-height: 1.6;
    animation: fadeInUp 1s ease-out 0.2s both;
  }

  .hero-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 3rem;
    animation: fadeInUp 1s ease-out 0.4s both;
  }

  .hero-actions .btn {
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .hero-actions .btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .hero-actions .btn:hover::before {
    left: 100%;
  }

  .hero-actions .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(59, 130, 246, 0.4);
  }

  .btn-secondary:hover {
    box-shadow: 0 15px 35px rgba(16, 185, 129, 0.4);
  }

  .hero-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 2rem;
    animation: fadeInUp 1s ease-out 0.6s both;
  }

  .stat {
    text-align: center;
    transition: transform 0.3s ease;
  }

  .stat:hover {
    transform: translateY(-5px);
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: #10B981;
    margin-bottom: 0.25rem;
    transition: color 0.3s ease;
  }

  .stat:hover .stat-number {
    color: #3B82F6;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #64748B;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .hero {
      min-height: 70vh;
      padding: 2rem 0;
    }

    .hero-title {
      font-size: 2.5rem;
    }

    .hero-description {
      font-size: 1.1rem;
    }

    .hero-actions {
      flex-direction: column;
      align-items: center;
    }

    .hero-actions .btn {
      width: 100%;
      max-width: 250px;
    }

    .hero-stats {
      flex-direction: column;
      gap: 1.5rem;
    }

    .stat-number {
      font-size: 1.5rem;
    }
  }
</style>